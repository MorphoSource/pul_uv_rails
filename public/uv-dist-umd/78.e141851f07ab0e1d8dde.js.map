{"version":3,"sources":["webpack://UV/./node_modules/@universalviewer/aleph/dist/esm-es5/ion-nav-link.entry.js","webpack://UV/./node_modules/@universalviewer/aleph/dist/esm-es5/nav-link-utils-7601dc1b.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAA0F;AAC9B;AAC5D;AACA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA,mBAAmB,qEAAO;AAC1B;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,wBAAwB;AACjD;AACA;AACA,0BAA0B,QAAQ,2DAAU,OAAO,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA,CAAC;AACkC;;;;;;;;;;;;;ACxBnC;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA,4DAA4D,mBAAmB;AAC/E;AACA;AACA;AACA;AACA,+DAA+D,mBAAmB;AAClF;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACwB","file":"78.e141851f07ab0e1d8dde.js","sourcesContent":["import { r as registerInstance, h, d as getElement, H as Host } from './core-684c60cc.js';\nimport { n as navLink } from './nav-link-utils-7601dc1b.js';\nvar NavLink = /** @class */ (function () {\n    function class_1(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        /**\n         * The transition direction when navigating to another page.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = function () {\n            return navLink(_this.el, _this.routerDirection, _this.component, _this.componentProps);\n        };\n    }\n    class_1.prototype.render = function () {\n        return (h(Host, { onClick: this.onClick }));\n    };\n    Object.defineProperty(class_1.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    return class_1;\n}());\nexport { NavLink as ion_nav_link };\n","var navLink = function (el, routerDirection, component, componentProps) {\n    var nav = el.closest('ion-nav');\n    if (nav) {\n        if (routerDirection === 'forward') {\n            if (component !== undefined) {\n                return nav.push(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'root') {\n            if (component !== undefined) {\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'back') {\n            return nav.pop({ skipIfBusy: true });\n        }\n    }\n    return Promise.resolve(false);\n};\nexport { navLink as n };\n"],"sourceRoot":""}