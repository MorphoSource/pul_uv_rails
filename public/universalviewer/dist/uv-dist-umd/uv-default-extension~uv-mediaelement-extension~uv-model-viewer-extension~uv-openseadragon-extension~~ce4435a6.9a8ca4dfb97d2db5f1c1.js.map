{"version":3,"sources":["webpack://UV/./src/modules/uv-shared-module/ThumbsView.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACyC;AACJ;AACc;AACE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,sDAAU;AAC3C;AACA,SAAS;AACT,iCAAiC,sDAAU;AAC3C;AACA,SAAS;AACT,iCAAiC,sDAAU;AAC3C;AACA,SAAS;AACT;AACA;AACA;AACA,YAAY,iEAAgB;AAC5B,gDAAgD;AAChD;AACA;AACA,6CAA6C,QAAQ,WAAW,eAAe,cAAc,MAAM,kBAAkB,UAAU,gBAAgB,QAAQ;AACvJ,kEAAkE,0BAA0B;AAC5F;AACA,0DAA0D,aAAa;AACvE,iEAAiE,QAAQ,IAAI,QAAQ,MAAM;AAC3F,yEAAyE,wBAAwB,IAAI,qBAAqB;AAC1H;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA,+BAA+B,KAAK;AACpC,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iEAAgB;AAC1D,6CAA6C,iEAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,+BAA+B,qDAAO;AACtC;AACA,2BAA2B,qDAAO;AAClC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA,2BAA2B,mDAAK;AAChC,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sDAAU;AAC7C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2CAA2C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,mDAAK;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,kDAAQ;AACY","file":"uv-default-extension~uv-mediaelement-extension~uv-model-viewer-extension~uv-openseadragon-extension~~ce4435a6.9a8ca4dfb97d2db5f1c1.js","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BaseEvents } from \"./BaseEvents\";\nimport { BaseView } from \"./BaseView\";\nimport { ViewingDirection } from \"@iiif/vocabulary\";\nimport { Dates, Maths, Strings } from \"@edsilv/utils\";\nvar ThumbsView = /** @class */ (function (_super) {\n    __extends(ThumbsView, _super);\n    function ThumbsView($element) {\n        var _this = _super.call(this, $element, true, true) || this;\n        _this.isCreated = false;\n        _this.isOpen = false;\n        return _this;\n    }\n    ThumbsView.prototype.create = function () {\n        var _this = this;\n        _super.prototype.create.call(this);\n        this.component.subscribe(BaseEvents.CANVAS_INDEX_CHANGE, function (index) {\n            _this.selectIndex(parseInt(index));\n        });\n        this.component.subscribe(BaseEvents.LOGIN, function () {\n            _this.loadThumbs();\n        });\n        this.component.subscribe(BaseEvents.CLICKTHROUGH, function () {\n            _this.loadThumbs();\n        });\n        this.$thumbs = $('<div class=\"thumbs\"></div>');\n        this.$element.append(this.$thumbs);\n        var viewingDirection = this.extension.helper.getViewingDirection() ||\n            ViewingDirection.LEFT_TO_RIGHT;\n        this.$thumbs.addClass(viewingDirection); // defaults to \"left-to-right\"\n        var that = this;\n        $.templates({\n            thumbsTemplate: '<div id=\"thumb{{>index}}\" class=\"{{:~className()}}\" data-src=\"{{>uri}}\" data-visible=\"{{>visible}}\" data-index=\"{{>index}}\">\\\n                                <div class=\"wrap\" style=\"height:{{>height + ~extraHeight()}}px\"></div>\\\n                                <div class=\"info\">\\\n                                    <span class=\"index\">{{:#index + 1}}</span>\\\n                                    <span class=\"label\" title=\"{{>label}}\">{{>label}}&nbsp;</span>\\\n                                    <span class=\"searchResults\" title=\"{{:~searchResultsTitle()}}\">{{>data.searchResults}}</span>\\\n                                </div>\\\n                             </div>\\\n                             {{if ~separator()}} \\\n                                 <div class=\"separator\"></div> \\\n                             {{/if}}'\n        });\n        var extraHeight = this.options.thumbsExtraHeight;\n        $.views.helpers({\n            separator: function () {\n                return false;\n            },\n            extraHeight: function () {\n                return extraHeight;\n            },\n            className: function () {\n                var className = \"thumb\";\n                if (this.data.index === 0) {\n                    className += \" first\";\n                }\n                if (!this.data.uri) {\n                    className += \" placeholder\";\n                }\n                var viewingDirection = that.extension.helper.getViewingDirection();\n                if (viewingDirection &&\n                    (viewingDirection === ViewingDirection.LEFT_TO_RIGHT ||\n                        viewingDirection === ViewingDirection.RIGHT_TO_LEFT)) {\n                    className += \" twoCol\";\n                }\n                else if (that.extension.helper.isPaged()) {\n                    className += \" twoCol\";\n                }\n                else {\n                    className += \" oneCol\";\n                }\n                return className;\n            },\n            searchResultsTitle: function () {\n                var searchResults = Number(this.data.data.searchResults);\n                if (searchResults) {\n                    if (searchResults > 1) {\n                        return Strings.format(that.content.searchResults, searchResults.toString());\n                    }\n                    return Strings.format(that.content.searchResult, searchResults.toString());\n                }\n                return \"\";\n            }\n        });\n        // use unevent to detect scroll stop.\n        this.$element.on(\"scroll\", function () {\n            _this.scrollStop();\n        }, 100);\n        this.resize();\n    };\n    ThumbsView.prototype.databind = function () {\n        if (!this.thumbs)\n            return;\n        this._$thumbsCache = null; // delete cache\n        this.createThumbs();\n        // do initial load to show padlocks\n        this.loadThumbs(0);\n        this.selectIndex(this.extension.helper.canvasIndex);\n    };\n    ThumbsView.prototype.createThumbs = function () {\n        var that = this;\n        if (!this.thumbs)\n            return;\n        // get median height\n        var heights = [];\n        for (var i = 0; i < this.thumbs.length; i++) {\n            var thumb = this.thumbs[i];\n            heights.push(thumb.height);\n        }\n        var medianHeight = Maths.median(heights);\n        for (var i = 0; i < this.thumbs.length; i++) {\n            var thumb = this.thumbs[i];\n            thumb.height = medianHeight;\n        }\n        this.$thumbs.link($.templates.thumbsTemplate, this.thumbs);\n        this.$thumbs.undelegate(\".thumb\", \"click\");\n        this.$thumbs.delegate(\".thumb\", \"click\", function (e) {\n            e.preventDefault();\n            var data = $.view(this).data;\n            that.lastThumbClickedIndex = data.index;\n            that.component.publish(BaseEvents.THUMB_SELECTED, data);\n        });\n        this.setLabel();\n        this.isCreated = true;\n    };\n    ThumbsView.prototype.scrollStop = function () {\n        var scrollPos = 1 /\n            ((this.$thumbs.height() - this.$element.height()) /\n                this.$element.scrollTop());\n        if (scrollPos > 1)\n            scrollPos = 1;\n        var thumbRangeMid = Math.floor((this.thumbs.length - 1) * scrollPos);\n        this.loadThumbs(thumbRangeMid);\n    };\n    ThumbsView.prototype.loadThumbs = function (index) {\n        if (index === void 0) { index = this.extension.helper.canvasIndex; }\n        if (!this.thumbs || !this.thumbs.length)\n            return;\n        var thumbType;\n        // get the type of the canvas content\n        var canvas = this.extension.helper.getCanvasByIndex(index);\n        var annotations = canvas.getContent();\n        if (annotations.length) {\n            var annotation = annotations[0];\n            var body = annotation.getBody();\n            if (body.length) {\n                var type = body[0].getType();\n                if (type) {\n                    thumbType = type.toString().toLowerCase();\n                }\n            }\n        }\n        var thumbRangeMid = index;\n        var thumbLoadRange = this.options.thumbsLoadRange;\n        var thumbRange = {\n            start: thumbRangeMid > thumbLoadRange ? thumbRangeMid - thumbLoadRange : 0,\n            end: thumbRangeMid < this.thumbs.length - 1 - thumbLoadRange\n                ? thumbRangeMid + thumbLoadRange\n                : this.thumbs.length - 1\n        };\n        var fadeDuration = this.options.thumbsImageFadeInDuration;\n        var that = this;\n        for (var i = thumbRange.start; i <= thumbRange.end; i++) {\n            var $thumb = this.getThumbByIndex(i);\n            var $wrap = $thumb.find(\".wrap\");\n            // if no img has been added yet\n            if (!$wrap.hasClass(\"loading\") && !$wrap.hasClass(\"loaded\")) {\n                var visible = $thumb.attr(\"data-visible\");\n                if (visible !== \"false\") {\n                    $wrap.removeClass(\"loadingFailed\");\n                    $wrap.addClass(\"loading\");\n                    if (thumbType) {\n                        $wrap.addClass(thumbType);\n                    }\n                    var src = $thumb.attr(\"data-src\");\n                    if (that.config.options.thumbsCacheInvalidation &&\n                        that.config.options.thumbsCacheInvalidation.enabled) {\n                        src += that.config.options.thumbsCacheInvalidation.paramType + \"t=\" + Dates.getTimeStamp();\n                    }\n                    var $img = $('<img src=\"' + src + '\" alt=\"\"/>');\n                    // fade in on load.\n                    $img.hide();\n                    $img.on(\"load\", function () {\n                        $(this).fadeIn(fadeDuration, function () {\n                            $(this)\n                                .parent()\n                                .switchClass(\"loading\", \"loaded\");\n                        });\n                    });\n                    $img.on(\"error\", function () {\n                        $(this)\n                            .parent()\n                            .switchClass(\"loading\", \"loadingFailed\");\n                    });\n                    $wrap.append($img);\n                }\n                else {\n                    $wrap.addClass(\"hidden\");\n                }\n            }\n        }\n    };\n    ThumbsView.prototype.show = function () {\n        var _this = this;\n        this.isOpen = true;\n        this.$element.show();\n        setTimeout(function () {\n            _this.selectIndex(_this.extension.helper.canvasIndex);\n        }, 1);\n    };\n    ThumbsView.prototype.hide = function () {\n        this.isOpen = false;\n        this.$element.hide();\n    };\n    ThumbsView.prototype.isPDF = function () {\n        var canvas = this.extension.helper.getCurrentCanvas();\n        var type = canvas.getType();\n        if (type) {\n            return type.toString().includes(\"pdf\");\n        }\n        return false;\n    };\n    ThumbsView.prototype.setLabel = function () {\n        $(this.$thumbs)\n            .find(\"span.index\")\n            .hide();\n        $(this.$thumbs)\n            .find(\"span.label\")\n            .show();\n    };\n    ThumbsView.prototype.addSelectedClassToThumbs = function (index) {\n        this.getThumbByIndex(index).addClass(\"selected\");\n    };\n    ThumbsView.prototype.selectIndex = function (index) {\n        // may be authenticating\n        if (index === -1)\n            return;\n        if (!this.thumbs || !this.thumbs.length)\n            return;\n        this.getAllThumbs().removeClass(\"selected\");\n        this.$selectedThumb = this.getThumbByIndex(index);\n        this.addSelectedClassToThumbs(index);\n        var indices = this.extension.getPagedIndices(index);\n        // scroll to thumb if the index change didn't originate\n        // within the thumbs view.\n        if (!~indices.indexOf(this.lastThumbClickedIndex)) {\n            this.$element.scrollTop(this.$selectedThumb.position().top);\n        }\n        // make sure visible images are loaded.\n        this.loadThumbs(index);\n    };\n    ThumbsView.prototype.getAllThumbs = function () {\n        if (!this._$thumbsCache) {\n            this._$thumbsCache = this.$thumbs.find(\".thumb\");\n        }\n        return this._$thumbsCache;\n    };\n    ThumbsView.prototype.getThumbByIndex = function (canvasIndex) {\n        return this.$thumbs.find('[data-index=\"' + canvasIndex + '\"]');\n    };\n    ThumbsView.prototype.scrollToThumb = function (canvasIndex) {\n        var $thumb = this.getThumbByIndex(canvasIndex);\n        this.$element.scrollTop($thumb.position().top);\n    };\n    ThumbsView.prototype.resize = function () {\n        _super.prototype.resize.call(this);\n    };\n    return ThumbsView;\n}(BaseView));\nexport { ThumbsView };\n"],"sourceRoot":""}