{"version":3,"sources":["webpack://UV/./node_modules/@universalviewer/aleph/dist/esm-es5/ion-menu-controller.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;AAC2D;AAC5B;AACE;AACyB;AAC1D;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oDAAc;AACpD,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACgD","file":"122.66559623477a6459c587.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nimport { r as registerInstance } from './core-684c60cc.js';\r\nimport './helpers-1644482e.js';\r\nimport './animation-d551500b.js';\r\nimport { m as menuController } from './index-cc681366.js';\r\nvar MenuController = /** @class */ (function () {\r\n    function class_1(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Open the menu. If a menu is not provided then it will open the first\r\n     * menu found. If the specified menu is `start` or `end`, then it will open\r\n     * the enabled menu on that side. Otherwise, it will try to find the menu\r\n     * using the menu's `id` property. If a menu is not found then it will\r\n     * return `false`.\r\n     *\r\n     * @param menu The menuId or side of the menu to open.\r\n     */\r\n    class_1.prototype.open = function (menu) {\r\n        return menuController.open(menu);\r\n    };\r\n    /**\r\n     * Close the menu. If a menu is specified, it will close that menu.\r\n     * If no menu is specified, then it will close any menu that is open.\r\n     * If it does not find any open menus, it will return `false`.\r\n     *\r\n     * @param menu The menuId or side of the menu to close.\r\n     */\r\n    class_1.prototype.close = function (menu) {\r\n        return menuController.close(menu);\r\n    };\r\n    /**\r\n     * Toggle the menu open or closed. If the menu is already open, it will try to\r\n     * close the menu, otherwise it will try to open it. Returns `false` if\r\n     * a menu is not found.\r\n     *\r\n     * @param menu The menuId or side of the menu to toggle.\r\n     */\r\n    class_1.prototype.toggle = function (menu) {\r\n        return menuController.toggle(menu);\r\n    };\r\n    /**\r\n     * Enable or disable a menu. Disabling a menu will not allow gestures\r\n     * for that menu or any calls to open it. This is useful when there are\r\n     * multiple menus on the same side and only one of them should be allowed\r\n     * to open. Enabling a menu will automatically disable all other menus\r\n     * on that side.\r\n     *\r\n     * @param enable If `true`, the menu should be enabled.\r\n     * @param menu The menuId or side of the menu to enable or disable.\r\n     */\r\n    class_1.prototype.enable = function (enable, menu) {\r\n        return menuController.enable(enable, menu);\r\n    };\r\n    /**\r\n     * Enable or disable the ability to swipe open the menu.\r\n     *\r\n     * @param enable If `true`, the menu swipe gesture should be enabled.\r\n     * @param menu The menuId or side of the menu to enable or disable the swipe gesture on.\r\n     */\r\n    class_1.prototype.swipeGesture = function (enable, menu) {\r\n        return menuController.swipeGesture(enable, menu);\r\n    };\r\n    /**\r\n     * Get whether or not the menu is open. Returns `true` if the specified\r\n     * menu is open. If a menu is not specified, it will return `true` if\r\n     * any menu is currently open.\r\n     *\r\n     * @param menu The menuId or side of the menu that is being checked.\r\n     */\r\n    class_1.prototype.isOpen = function (menu) {\r\n        return menuController.isOpen(menu);\r\n    };\r\n    /**\r\n     * Get whether or not the menu is enabled. Returns `true` if the\r\n     * specified menu is enabled. Returns `false` if a menu is disabled\r\n     * or not found.\r\n     *\r\n     * @param menu The menuId or side of the menu that is being checked.\r\n     */\r\n    class_1.prototype.isEnabled = function (menu) {\r\n        return menuController.isEnabled(menu);\r\n    };\r\n    /**\r\n     * Get a menu instance. If a menu is not provided then it will return the first\r\n     * menu found. If the specified menu is `start` or `end`, then it will return the\r\n     * enabled menu on that side. Otherwise, it will try to find the menu using the menu's\r\n     * `id` property. If a menu is not found then it will return `null`.\r\n     *\r\n     * @param menu The menuId or side of the menu.\r\n     */\r\n    class_1.prototype.get = function (menu) {\r\n        return menuController.get(menu);\r\n    };\r\n    /**\r\n     * Get the instance of the opened menu. Returns `null` if a menu is not found.\r\n     */\r\n    class_1.prototype.getOpen = function () {\r\n        return menuController.getOpen();\r\n    };\r\n    /**\r\n     * Get all menu instances.\r\n     */\r\n    class_1.prototype.getMenus = function () {\r\n        return menuController.getMenus();\r\n    };\r\n    /**\r\n     * Get whether or not a menu is animating. Returns `true` if any\r\n     * menu is currently animating.\r\n     */\r\n    class_1.prototype.isAnimating = function () {\r\n        return menuController.isAnimating();\r\n    };\r\n    /**\r\n     * Registers a new animation that can be used with any `ion-menu` by\r\n     * passing the name of the animation in its `type` property.\r\n     *\r\n     * @param name The name of the animation to register.\r\n     * @param animation The animation function to register.\r\n     */\r\n    class_1.prototype.registerAnimation = function (name, animation) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, menuController.registerAnimation(name, animation)];\r\n            });\r\n        });\r\n    };\r\n    return class_1;\r\n}());\r\nexport { MenuController as ion_menu_controller };\r\n"],"sourceRoot":""}